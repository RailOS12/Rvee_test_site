// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let users = [];
let currentFilter = 'all';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
  const currentUser = sessionStorage.getItem('currentUser') || localStorage.getItem('rememberMe');
  
  if (!currentUser) {
    window.location.href = 'admin-login.html';
    return null;
  }
  
  return JSON.parse(currentUser);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadUsers() {
  const savedUsers = localStorage.getItem('users');
  users = savedUsers ? JSON.parse(savedUsers) : [];
  console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length, users);
  updateStats();
  renderUsers();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function saveUsers() {
  console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users);
  try {
    localStorage.setItem('users', JSON.stringify(users));
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    const saved = localStorage.getItem('users');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', JSON.parse(saved));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å (F12)');
  }
  updateStats();
  renderUsers();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
  const total = users.length;
  const active = users.filter(u => u.status === 'active').length;
  const inactive = users.filter(u => u.status === 'inactive').length;
  
  document.getElementById('totalUsers').textContent = total;
  document.getElementById('activeUsers').textContent = active;
  document.getElementById('inactiveUsers').textContent = inactive;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function renderUsers() {
  const tbody = document.getElementById('usersTableBody');
  const searchTerm = document.getElementById('searchInput').value.toLowerCase();
  
  let filteredUsers = users.filter(user => {
    const matchesSearch = 
      user.username.toLowerCase().includes(searchTerm) ||
      user.email.toLowerCase().includes(searchTerm) ||
      user.role.toLowerCase().includes(searchTerm);
    
    const matchesFilter = 
      currentFilter === 'all' ||
      user.status === currentFilter;
    
    return matchesSearch && matchesFilter;
  });
  
  if (filteredUsers.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="7" style="text-align: center; padding: 40px; color: var(--text-secondary);">
          <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" style="margin-bottom: 16px; opacity: 0.3;">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="12"></line>
            <line x1="12" y1="16" x2="12.01" y2="16"></line>
          </svg>
          <div style="font-size: 18px; margin-bottom: 8px;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
          <div style="font-size: 14px;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</div>
        </td>
      </tr>
    `;
    return;
  }
  
  tbody.innerHTML = filteredUsers.map(user => {
    const managerInfo = user.role === 'employee' && user.managerId 
      ? `<div style="font-size: 12px; color: var(--text-secondary); margin-top: 2px;">–ú–µ–Ω–µ–¥–∂–µ—Ä: ${getManagerName(user.managerId)}</div>`
      : '';
    
    return `
      <tr>
        <td><span class="user-id">#${user.id}</span></td>
        <td>
          <span class="user-name">${escapeHtml(user.username)}</span>
          ${managerInfo}
        </td>
        <td>${escapeHtml(user.email)}</td>
        <td><span class="badge ${user.role}">${getRoleLabel(user.role)}</span></td>
        <td><span class="badge ${user.status}">${getStatusLabel(user.status)}</span></td>
        <td><span class="user-date">${formatDate(user.createdAt)}</span></td>
        <td>
          <div class="action-buttons">
            <button class="btn-action" onclick="openEditUserModal(${user.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
            <button class="btn-action delete" onclick="deleteUser(${user.id})">–£–¥–∞–ª–∏—Ç—å</button>
          </div>
        </td>
      </tr>
    `;
  }).join('');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function getRoleLabel(role) {
  const labels = {
    'employee': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
    'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä'
  };
  return labels[role] || role;
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ ID
function getManagerName(managerId) {
  if (!managerId) return '-';
  const manager = users.find(u => u.id === managerId);
  return manager ? manager.username : '–ù–µ –Ω–∞–π–¥–µ–Ω';
}

function getStatusLabel(status) {
  const labels = {
    'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
    'inactive': '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'
  };
  return labels[status] || status;
}

function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function searchUsers() {
  renderUsers();
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function filterUsers(filter) {
  currentFilter = filter;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.classList.remove('active');
    if (btn.dataset.filter === filter) {
      btn.classList.add('active');
    }
  });
  
  renderUsers();
}

// –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
function populateManagerSelect(selectId, excludeUserId = null) {
  const select = document.getElementById(selectId);
  select.innerHTML = '<option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>';
  
  const managers = users.filter(u => u.role === 'manager' && u.id !== excludeUserId);
  managers.forEach(manager => {
    const option = document.createElement('option');
    option.value = manager.id;
    option.textContent = manager.username;
    select.appendChild(option);
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
function toggleManagerSelect() {
  const role = document.getElementById('userRole').value;
  const managerGroup = document.getElementById('managerSelectGroup');
  
  if (role === 'employee') {
    managerGroup.style.display = 'block';
    populateManagerSelect('userManager');
  } else {
    managerGroup.style.display = 'none';
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
function toggleEditManagerSelect() {
  const role = document.getElementById('editRole').value;
  const managerGroup = document.getElementById('editManagerSelectGroup');
  
  if (role === 'employee') {
    managerGroup.style.display = 'block';
    const userId = parseInt(document.getElementById('editUserId').value);
    populateManagerSelect('editManager', userId);
  } else {
    managerGroup.style.display = 'none';
  }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function openCreateUserModal() {
  document.getElementById('createUserModal').classList.add('show');
  document.getElementById('createUserForm').reset();
  toggleManagerSelect(); // –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
function closeCreateUserModal() {
  document.getElementById('createUserModal').classList.remove('show');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
document.getElementById('createUserForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const username = document.getElementById('newUsername').value.trim();
  const email = document.getElementById('newEmail').value.trim();
  const password = document.getElementById('newPassword').value;
  const confirmPassword = document.getElementById('confirmPassword').value;
  const role = document.getElementById('userRole').value;
  const status = document.getElementById('userStatus').value;
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (password !== confirmPassword) {
    alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
    return;
  }
  
  if (users.some(u => u.username === username)) {
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    return;
  }
  
  if (users.some(u => u.email === email)) {
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)
  const managerId = role === 'employee' ? document.getElementById('userManager').value : null;
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const newUser = {
    id: users.length > 0 ? Math.max(...users.map(u => u.id)) + 1 : 1,
    username,
    email,
    password,
    role,
    status,
    managerId: managerId ? parseInt(managerId) : null,
    createdAt: new Date().toISOString()
  };
  
  users.push(newUser);
  saveUsers();
  closeCreateUserModal();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function openEditUserModal(userId) {
  const user = users.find(u => u.id === userId);
  if (!user) return;
  
  document.getElementById('editUserId').value = user.id;
  document.getElementById('editUsername').value = user.username;
  document.getElementById('editEmail').value = user.email;
  document.getElementById('editPassword').value = '';
  document.getElementById('editRole').value = user.role;
  document.getElementById('editStatus').value = user.status;
  
  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  toggleEditManagerSelect();
  
  if (user.role === 'employee' && user.managerId) {
    document.getElementById('editManager').value = user.managerId;
  }
  
  document.getElementById('editUserModal').classList.add('show');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function closeEditUserModal() {
  document.getElementById('editUserModal').classList.remove('show');
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
document.getElementById('editUserForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const userId = parseInt(document.getElementById('editUserId').value);
  const username = document.getElementById('editUsername').value.trim();
  const email = document.getElementById('editEmail').value.trim();
  const password = document.getElementById('editPassword').value;
  const role = document.getElementById('editRole').value;
  const status = document.getElementById('editStatus').value;
  
  const userIndex = users.findIndex(u => u.id === userId);
  if (userIndex === -1) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ email (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  if (users.some(u => u.id !== userId && u.username === username)) {
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    return;
  }
  
  if (users.some(u => u.id !== userId && u.email === email)) {
    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)
  const managerId = role === 'employee' ? document.getElementById('editManager').value : null;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  users[userIndex].username = username;
  users[userIndex].email = email;
  users[userIndex].role = role;
  users[userIndex].status = status;
  users[userIndex].managerId = managerId ? parseInt(managerId) : null;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥–µ–Ω
  if (password) {
    users[userIndex].password = password;
  }
  
  saveUsers();
  closeEditUserModal();
  showNotification('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function deleteUser(userId) {
  const user = users.find(u => u.id === userId);
  if (!user) return;
  
  const currentUser = checkAuth();
  if (currentUser && currentUser.userId === userId) {
    alert('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å!');
    return;
  }
  
  if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${user.username}"?`)) {
    users = users.filter(u => u.id !== userId);
    saveUsers();
    showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!', 'warning');
  }
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
    sessionStorage.removeItem('currentUser');
    localStorage.removeItem('rememberMe');
    window.location.href = 'admin-login.html';
  }
}

// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function reloadUsers() {
  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  loadUsers();
  showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ localStorage', 'success');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'success') {
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.style.cssText = `
    position: fixed;
    top: 24px;
    right: 24px;
    padding: 16px 24px;
    background: ${type === 'success' ? 'var(--success)' : 'var(--warning)'};
    color: white;
    border-radius: 10px;
    box-shadow: 0 4px 20px var(--shadow);
    z-index: 10000;
    animation: slideIn 0.3s ease;
    font-weight: 500;
  `;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.style.animation = 'slideOut 0.3s ease';
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
window.addEventListener('click', function(e) {
  if (e.target.classList.contains('modal')) {
    e.target.classList.remove('show');
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', function() {
  const currentUser = checkAuth();
  if (currentUser) {
    document.getElementById('currentUserName').textContent = currentUser.username;
    
    // –ù–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const savedUsers = localStorage.getItem('users');
    if (savedUsers) {
      const users = JSON.parse(savedUsers);
      const fullUser = users.find(u => u.id === currentUser.userId);
      if (fullUser) {
        document.getElementById('currentUserRole').textContent = getRoleLabel(fullUser.role);
      }
    }
    
    loadUsers();
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
  @keyframes slideIn {
    from {
      transform: translateX(400px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(400px);
      opacity: 0;
    }
  }
`;
document.head.appendChild(style);
