// IndexedDB –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç IndexedDB –≤–º–µ—Å—Ç–æ localStorage –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤

const DB_NAME = 'CallAnalyticsDB';
const DB_VERSION = 1;
const STORE_NAME = 'audioRecords';

// –û—Ç–∫—Ä—ã—Ç—å/—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
function openDatabase() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    
    request.onerror = () => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è IndexedDB:', request.error);
      reject(request.error);
    };
    
    request.onsuccess = () => {
      resolve(request.result);
    };
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      
      // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        const objectStore = db.createObjectStore(STORE_NAME, { keyPath: 'id', autoIncrement: true });
        objectStore.createIndex('employeeId', 'employeeId', { unique: false });
        objectStore.createIndex('uploadDate', 'uploadDate', { unique: false });
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ IndexedDB');
      }
    };
  });
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
async function saveAudioRecordsDB(records) {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await new Promise((resolve, reject) => {
      const clearRequest = objectStore.clear();
      clearRequest.onsuccess = () => resolve();
      clearRequest.onerror = () => reject(clearRequest.error);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    for (const record of records) {
      await new Promise((resolve, reject) => {
        const addRequest = objectStore.add(record);
        addRequest.onsuccess = () => resolve();
        addRequest.onerror = () => reject(addRequest.error);
      });
    }
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB:', records.length, '–∑–∞–ø–∏—Å–µ–π');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ IndexedDB:', error);
    throw error;
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
async function loadAudioRecordsDB() {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readonly');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = objectStore.getAll();
      
      request.onsuccess = () => {
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ IndexedDB:', request.result.length, '–∑–∞–ø–∏—Å–µ–π');
        resolve(request.result);
      };
      
      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ IndexedDB:', request.error);
        reject(request.error);
      };
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ IndexedDB:', error);
    return [];
  }
}

// –î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
async function addAudioRecordDB(record) {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = objectStore.add(record);
      
      request.onsuccess = () => {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ IndexedDB, ID:', request.result);
        record.id = request.result; // –û–±–Ω–æ–≤–ª—è–µ–º ID –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        resolve(record);
      };
      
      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ IndexedDB:', request.error);
        reject(request.error);
      };
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    throw error;
  }
}

// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
async function deleteAudioRecordDB(id) {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = objectStore.delete(id);
      
      request.onsuccess = () => {
        console.log('üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ IndexedDB, ID:', id);
        resolve();
      };
      
      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ IndexedDB:', request.error);
        reject(request.error);
      };
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ ID
async function getAudioRecordDB(id) {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readonly');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = objectStore.get(id);
      
      request.onsuccess = () => {
        resolve(request.result);
      };
      
      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', request.error);
        reject(request.error);
      };
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async function getEmployeeAudioRecordsDB(employeeId) {
  try {
    const allRecords = await loadAudioRecordsDB();
    return allRecords.filter(r => r.employeeId === employeeId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
    return [];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.AudioDB = {
  save: saveAudioRecordsDB,
  load: loadAudioRecordsDB,
  add: addAudioRecordDB,
  delete: deleteAudioRecordDB,
  get: getAudioRecordDB,
  getByEmployee: getEmployeeAudioRecordsDB
};
