// IndexedDB –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç IndexedDB –≤–º–µ—Å—Ç–æ localStorage –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤

const DB_NAME = 'CallAnalyticsDB';
const DB_VERSION = 1;
const STORE_NAME = 'audioRecords';

// –û—Ç–∫—Ä—ã—Ç—å/—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
function openDatabase() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    
    request.onerror = () => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è IndexedDB:', request.error);
      reject(request.error);
    };
    
    request.onsuccess = () => {
      resolve(request.result);
    };
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      
      // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        const objectStore = db.createObjectStore(STORE_NAME, { keyPath: 'id', autoIncrement: true });
        objectStore.createIndex('employeeId', 'employeeId', { unique: false });
        objectStore.createIndex('uploadDate', 'uploadDate', { unique: false });
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ IndexedDB');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π (–≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç:
      // - transcription_level1: –º–∞—Å—Å–∏–≤ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Ç–∞–π–º–∏–Ω–≥–∞–º–∏ (–±–µ–∑ —Ä–æ–ª–µ–π)
      // - transcription_level2: –æ–±—ä–µ–∫—Ç —Å utterances (—Å —Ä–æ–ª—è–º–∏)
      // - transcription_status: { level1: bool, level2: bool }
    };
  });
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
async function saveAudioRecordsDB(records) {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await new Promise((resolve, reject) => {
      const clearRequest = objectStore.clear();
      clearRequest.onsuccess = () => resolve();
      clearRequest.onerror = () => reject(clearRequest.error);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    for (const record of records) {
      await new Promise((resolve, reject) => {
        const addRequest = objectStore.add(record);
        addRequest.onsuccess = () => resolve();
        addRequest.onerror = () => reject(addRequest.error);
      });
    }
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB:', records.length, '–∑–∞–ø–∏—Å–µ–π');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ IndexedDB:', error);
    throw error;
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
async function loadAudioRecordsDB() {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readonly');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = objectStore.getAll();
      
      request.onsuccess = () => {
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ IndexedDB:', request.result.length, '–∑–∞–ø–∏—Å–µ–π');
        resolve(request.result);
      };
      
      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ IndexedDB:', request.error);
        // Fallback –Ω–∞ localStorage
        console.log('üîÑ Fallback –Ω–∞ localStorage...');
        const fallback = localStorage.getItem('audioRecords_fallback');
        resolve(fallback ? JSON.parse(fallback) : []);
      };
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ IndexedDB:', error);
    // Fallback –Ω–∞ localStorage
    console.log('üîÑ Fallback –Ω–∞ localStorage...');
    const fallback = localStorage.getItem('audioRecords_fallback');
    return fallback ? JSON.parse(fallback) : [];
  }
}

// –î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
async function addAudioRecordDB(record) {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = objectStore.add(record);
      
      request.onsuccess = () => {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ IndexedDB, ID:', request.result);
        record.id = request.result; // –û–±–Ω–æ–≤–ª—è–µ–º ID –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ localStorage –∫–∞–∫ backup (–ë–ï–ó audioData)
        try {
          const existing = JSON.parse(localStorage.getItem('audioRecords_meta') || '[]');
          const meta = {
            id: record.id,
            employeeId: record.employeeId,
            fileName: record.fileName,
            description: record.description,
            uploadDate: record.uploadDate,
            uploadedBy: record.uploadedBy,
            duration: record.duration,
            size: record.size,
            hasAudio: true
          };
          existing.push(meta);
          localStorage.setItem('audioRecords_meta', JSON.stringify(existing));
          console.log('üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
        } catch (e) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ localStorage:', e);
        }
        
        resolve(record);
      };
      
      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ IndexedDB:', request.error);
        // Fallback –Ω–∞ localStorage
        console.log('üîÑ Fallback –Ω–∞ localStorage...');
        const existing = JSON.parse(localStorage.getItem('audioRecords_fallback') || '[]');
        record.id = existing.length > 0 ? Math.max(...existing.map(r => r.id)) + 1 : 1;
        existing.push(record);
        localStorage.setItem('audioRecords_fallback', JSON.stringify(existing));
        resolve(record);
      };
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    // Fallback –Ω–∞ localStorage
    console.log('üîÑ Fallback –Ω–∞ localStorage...');
    const existing = JSON.parse(localStorage.getItem('audioRecords_fallback') || '[]');
    record.id = existing.length > 0 ? Math.max(...existing.map(r => r.id)) + 1 : 1;
    existing.push(record);
    localStorage.setItem('audioRecords_fallback', JSON.stringify(existing));
    return record;
  }
}

// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
async function deleteAudioRecordDB(id) {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = objectStore.delete(id);
      
      request.onsuccess = () => {
        console.log('üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ IndexedDB, ID:', id);
        resolve();
      };
      
      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ IndexedDB:', request.error);
        reject(request.error);
      };
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ ID
async function getAudioRecordDB(id) {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readonly');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    return new Promise((resolve, reject) => {
      const request = objectStore.get(id);
      
      request.onsuccess = () => {
        resolve(request.result);
      };
      
      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', request.error);
        reject(request.error);
      };
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async function getEmployeeAudioRecordsDB(employeeId) {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–µ–π –¥–ª—è employeeId:', employeeId, '—Ç–∏–ø:', typeof employeeId);
    const allRecords = await loadAudioRecordsDB();
    console.log('üìÇ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ:', allRecords.length);
    
    if (allRecords.length > 0) {
      console.log('üîé –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–µ–π:', allRecords.map(r => ({
        id: r.id,
        employeeId: r.employeeId,
        employeeIdType: typeof r.employeeId,
        fileName: r.fileName
      })));
    }
    
    const filtered = allRecords.filter(r => {
      const match = r.employeeId == employeeId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º == –¥–ª—è –Ω–µ—Å—Ç—Ä–æ–≥–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      if (match) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', r.fileName, 'employeeId:', r.employeeId);
      }
      return match;
    });
    
    console.log('üìº –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', filtered.length);
    return filtered;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
    return [];
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
async function updateAudioRecordDB(id, updates) {
  try {
    const db = await openDatabase();
    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const objectStore = transaction.objectStore(STORE_NAME);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    const getRequest = objectStore.get(id);
    
    return new Promise((resolve, reject) => {
      getRequest.onsuccess = () => {
        const record = getRequest.result;
        
        if (!record) {
          reject(new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
          return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        const updatedRecord = { ...record, ...updates };
        
        const putRequest = objectStore.put(updatedRecord);
        
        putRequest.onsuccess = () => {
          console.log('‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ IndexedDB, ID:', id);
          resolve(updatedRecord);
        };
        
        putRequest.onerror = () => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ IndexedDB:', putRequest.error);
          reject(putRequest.error);
        };
      };
      
      getRequest.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', getRequest.error);
        reject(getRequest.error);
      };
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.AudioDB = {
  save: saveAudioRecordsDB,
  load: loadAudioRecordsDB,
  add: addAudioRecordDB,
  delete: deleteAudioRecordDB,
  get: getAudioRecordDB,
  getByEmployee: getEmployeeAudioRecordsDB,
  update: updateAudioRecordDB
};
